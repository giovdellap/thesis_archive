DOCUMENT TYPE A: System Architecture Description

Overview
"Not Far(m) From Home" is a platform designed to bridge local farmers and consumers. It facilitates the posting, reservation, and pickup of fresh produce directly from agricultural companies.

Architecture Design

- Frontend: Built with Angular, providing a responsive user interface for clients, agricultural companies, and the admin. Implements user authentication, product browsing, and order management functionalities.
- Backend: Node.js with ExpressJS, responsible for business logic, data processing, and API endpoints.
- Database: MongoDB, distributed across multiple containers, each corresponding to a microservice.
- Microservices: Designed as Docker containers, encapsulating specific functionalities like user management, product inventory, order processing, and administrative tasks.
- APIs: RESTful APIs for communication between frontend, backend, and between microservices.
- Authentication: JWT (JSON Web Tokens) for secure and efficient user authentication and session management.

DOCUMENT TYPE B: List of Containers

1) User Management Container: 
Handles user registration, login, and profile management.
2) Product Management Container: 
Manages product listings, updates, and inventory for agricultural companies.
3) Order Management Container: 
Processes orders, including cart management and pickup scheduling.
4) Admin Management Container: 
Provides administrative functionalities like user and product oversight.

1. User Management Container

Container's Behaviour and Function: 
Manages user accounts including registration, authentication, profile management, and session handling for clients, agricultural companies, and administrators.

Services Within the Container:
- Registration Service
- Authentication Service
- Profile Management Service
-Session Management Service

Endpoints:
Endpoint URL	Related Service	HTTP Method
/register	Registration Service	POST
/login	Authentication Service	POST
/profile	Profile Management Service	GET
/session	Session Management Service	GET

2. Product Management Container

Container's Behaviour and Function: 
Responsible for handling product listings, inventory management, and product updates for agricultural companies.

Services Within the Container:
- Product Listing Service
- Inventory Management Service
- Product Update Service

Endpoints:
Endpoint URL	Related Service	HTTP Method
/products/list	Product Listing Service	GET
/inventory/update	Inventory Management Service	POST
/product/update	Product Update Service	PUT

3. Order Management Container

Container's Behaviour and Function: 
Manages the entire order process including cart management, order placement, and scheduling pickups.

Services Within the Container:
- Cart Management Service
- Order Placement Service
- Pickup Scheduling Service

Endpoints:
Endpoint URL	Related Service	HTTP Method
/cart/add	Cart Management Service	POST
/cart/remove	Cart Management Service	DELETE
/order/complete	Order Placement Service	POST
/pickup/schedule	Pickup Scheduling Service	POST

4. Admin Management Container

Container's Behaviour and Function: 
Provides functionalities for site administration including user oversight, order monitoring, and platform maintenance.

Services Within the Container:
- User Oversight Service
- Order Monitoring Service
- Platform Maintenance Service

Endpoints:
Endpoint URL	Related Service	HTTP Method
/admin/users	User Oversight Service	GET
/admin/orders	Order Monitoring Service	GET
/admin/maintenance	Platform Maintenance Service	POST

Each container is designed to encapsulate its respective functionalities, enabling a modular and scalable architecture. This modular approach also facilitates easier maintenance and potential future expansion of the platform's capabilities.

DOCUMENT TYPE D: Service Descriptions for User Management Container

1. Registration Service
Behaviour and Purpose: Allows users (Clients, Agricultural Companies, and Admins) to create new accounts on the platform.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/register	Registration Service	POST	EXTERNAL
Database Specifications: Stores user credentials and personal details. Data types include UserID, Name, Email, Password, Role.

2. Authentication Service
Behaviour and Purpose: Handles user login, ensuring secure access to the platform.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/login	Authentication Service	POST	EXTERNAL
Database Specifications: Verifies user credentials against stored data. Involves UserID, Email, and Password.

3. Profile Management Service
Behaviour and Purpose: Enables users to view and edit their personal information.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/profile	Profile Management Service	GET	EXTERNAL
/profile/update	Profile Management Service	PUT	EXTERNAL
Database Specifications: Access and updates user profile data including UserID, Name, Email, and other personal details.

4. Session Management Service
Behaviour and Purpose: Manages user sessions for enhanced user experience, allowing users to remain logged in across browser reloads.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/session	Session Management Service	GET	EXTERNAL
/logout	Session Management Service	POST	EXTERNAL
Database Specifications: Utilizes session tokens and user identifiers (UserID) to manage active sessions.
Each service in the User Management Container is designed to handle specific aspects of user interaction with the platform, from account creation to session management. This modular approach enhances maintainability and scalability of the system.

DOCUMENT TYPE D: Service Descriptions for Product Management Container

1. Product Listing Service
Behaviour and Purpose: Enables the listing of products by agricultural companies, allowing clients to view available produce.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/products/list	Product Listing Service	GET	EXTERNAL
Database Specifications: Manages product data including ProductID, Name, Description, Price, and Availability. Used primarily for read operations.

2. Inventory Management Service
Behaviour and Purpose: Allows agricultural companies to manage their product inventory, including adding new items and updating existing ones.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/inventory/add	Inventory Management Service	POST	EXTERNAL
/inventory/update	Inventory Management Service	PUT	EXTERNAL
/inventory/delete	Inventory Management Service	DELETE	EXTERNAL
Database Specifications: Handles detailed inventory data such as ProductID, Quantity, Freshness Date, and other relevant attributes.

3. Product Update Service
Behaviour and Purpose: Facilitates the modification of product details by agricultural companies, including price changes and availability updates.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/product/update	Product Update Service	PUT	EXTERNAL
Database Specifications: Accesses and modifies product information like ProductID, Price, Description, and Availability. Focuses on write and update operations.
Each service in the Product Management Container is designed to address specific aspects of managing and presenting agricultural products on the platform. This separation of concerns allows for better manageability and scalability of the system.

DOCUMENT TYPE D: Service Descriptions for Order Management Container

1. Cart Management Service
Behaviour and Purpose: Manages the shopping cart functionality, allowing clients to add or remove products from their cart.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/cart/add	Cart Management Service	POST	EXTERNAL
/cart/remove	Cart Management Service	DELETE	EXTERNAL
/cart/view	Cart Management Service	GET	EXTERNAL
Database Specifications: Handles cart data including CartID, UserID, ProductID, Quantity, and current state of the cart.

2. Order Placement Service
Behaviour and Purpose: Allows clients to place orders with their selected products and choose a pickup date.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/order/place	Order Placement Service	POST	EXTERNAL
/order/details	Order Placement Service	GET	EXTERNAL
Database Specifications: Manages order information such as OrderID, UserID, ProductDetails (including ProductID and Quantity), TotalPrice, and PickupDate.

3. Pickup Scheduling Service
Behaviour and Purpose: Provides functionality for clients to schedule a pickup date and time for their orders.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/pickup/schedule	Pickup Scheduling Service	POST	EXTERNAL
/pickup/details	Pickup Scheduling Service	GET	EXTERNAL
Database Specifications: Stores pickup information linked to each order, including OrderID, PickupDate, and PickupTime.
Each service in the Order Management Container is specifically designed to handle different aspects of the order process, from cart management to scheduling pickups. This targeted approach helps in maintaining a clear separation of concerns and enhancing the scalability of the platform.

DOCUMENT TYPE D: Service Descriptions for Admin Management Container

1. User Oversight Service
Behaviour and Purpose: Enables the site administrator to oversee and manage user accounts, ensuring platform integrity.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/admin/users	User Oversight Service	GET	EXTERNAL
/admin/user/delete	User Oversight Service	DELETE	EXTERNAL
/admin/user/details	User Oversight Service	GET	EXTERNAL
Database Specifications: Manages user-related data including UserID, Name, Email, Role, and Activity Status.

2. Order Monitoring Service
Behaviour and Purpose: Allows the administrator to view and analyze all orders placed on the platform for better business insights.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/admin/orders	Order Monitoring Service	GET	EXTERNAL
/admin/order/details	Order Monitoring Service	GET	EXTERNAL
Database Specifications: Accesses order data, such as OrderID, UserID, TotalPrice, and OrderStatus.

3. Platform Maintenance Service
Behaviour and Purpose: Facilitates various maintenance activities on the platform, including adding or modifying areas, and managing products.
Endpoints:
Endpoint URL	Related Service	HTTP Method	INTERNAL/EXTERNAL
/admin/maintenance/area	Platform Maintenance Service	POST	EXTERNAL
/admin/product/add	Platform Maintenance Service	POST	EXTERNAL
/admin/product/update	Platform Maintenance Service	PUT	EXTERNAL
/admin/product/delete	Platform Maintenance Service	DELETE	EXTERNAL
Database Specifications: Manages platform-wide settings and configurations, including area information and product details.
Each service in the Admin Management Container is tailored to support the administrative functions of the platform, ensuring effective management and oversight. This specialized approach enhances the platform's operational efficiency and scalability.