### **Service:** auth

### Service Purpose

The 'auth' service is a critical component of the Not Far(m) From Home platform, responsible for managing all aspects of authentication and token management for users and agricultural companies. Its primary purpose is to enable secure access to the platform, ensuring that only authenticated users can interact with the system, whether they are browsing, adding to cart, or managing their inventories. The service supports the platform's aim of facilitating direct interactions between local farmers and consumers by ensuring that these interactions are authenticated, thus maintaining a secure and trustworthy environment. It handles the essential functions of user registration, login, and session management through token-based authentication mechanisms.

### Key Features

User Authentication: The service provides endpoints for user login and signup. These processes are handled using POST requests, where users submit credentials (username, email, password) and receive a token if authenticated successfully​​.
Token Management: Leveraging the PyJWT library, the service issues and verifies JSON Web Tokens (JWTs). This is vital for maintaining user sessions and ensuring that users do not have to re-enter their credentials with every session refresh, aligning with user stories where maintaining login sessions is crucial​​.
Secure Password Handling: Utilizing the Cryptography library, the service ensures that all user passwords are encrypted before storage, providing robust security against unauthorized access​​.
Session Persistence: The service uses tokens to manage sessions, which supports persistent logins across sessions, addressing user needs for convenience without compromising security​​​​.
Role-Based Access: The service supports different roles (e.g., clients, agricultural companies, administrators) and manages their credentials and session tokens accordingly, thus facilitating a differentiated access control system tailored to the needs of each user group​​.

### Programming Language, Frameworks and Libraries

- Python 3.11.6
- Flask 3.0.0: A lightweight WSGI web application framework used to build web applications.
- Gunicorn 21.2.0: A Python WSGI HTTP Server for UNIX, used to manage the Flask application and serve it on a network.
- PyJWT 1.7.1: A Python library to work with JSON Web Tokens, used for handling authentication tokens.
- Requests 2.31.0: A simple HTTP library for Python, used to send HTTP requests easily.
- Cryptography 41.0.4: Provides cryptographic recipes and primitives to Python developers.

### Scaffolding and Architectural Patterns

- The service is structured around a Flask application, managed and served by Gunicorn as a WSGI server.
- Flask’s lightweight and modular design allows it to be extended with a variety of add-ons.
- Gunicorn is configured to start with 4 workers, binding to all network interfaces on port 9701, suggesting readiness for production environments.

### Endpoints

Endpoint URL | Request Object | Response Object | HTTP Method
-------------------------------------------------------------
/{role}/login | Login Request | Login Response | POST
/{role}/signup | Signup Request | Signup Response | POST
/verifyToken | Token Verification Request | Token Verification Response | POST

### Data Structures

#### Login Request:
Variable Name | Variable Type
----------------------------
email | string
password | string

#### Login Response:
Variable Name | Variable Type
----------------------------
token | string
success | boolean

#### Signup Request (for both roles, specific fields for farmers):
Variable Name | Variable Type
----------------------------
username | string
email | string
password | string
image | string (optional for farmers)
area | string (optional for farmers)
address | string (optional for farmers)

#### Signup Response:
Variable Name | Variable Type
----------------------------
success | boolean
token | string
id | string

#### Token Verification Request:
Variable Name | Variable Type
----------------------------
token | string

#### Token Verification Response:
Variable Name | Variable Type
----------------------------
success | boolean
email | string
role | string

