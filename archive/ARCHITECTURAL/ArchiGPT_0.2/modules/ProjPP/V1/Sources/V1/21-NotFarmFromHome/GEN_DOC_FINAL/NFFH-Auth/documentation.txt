### **Container:** NFFH-Auth

### Container Purpose

The NFFH-Auth container is designed to secure the Not Far(m) From Home platform, which facilitates direct interactions between local farmers and consumers by promoting "km 0" products. This container hosts the 'auth' service, a pivotal element in ensuring that all interactions on the platform are secure and authenticated. Utilizing Python and Flask, the service manages user registration, login, and session management through token-based authentication, thereby supporting user stories related to registration, login persistence, and session security​​.
This container's primary function is to handle sensitive operations like user authentication and token management, which are essential for maintaining the integrity and security of user sessions. By leveraging advanced security practices such as encrypted password storage and JSON Web Tokens (JWTs), the NFFH-Auth container underpins the platform's capability to provide a safe environment where users can confidently engage with the platform, knowing their data and interactions are protected​​.

### Services Interaction

The 'auth' service within the NFFH-Auth container operates as a standalone service but is intricately linked to various parts of the system through a network bridge, enabling it to interact seamlessly with other backend services like those for clients, farmers, and order management​​. The service's endpoints are designed to cater to different roles such as clients, agricultural companies, and administrators, aligning with the user stories that require role-based access to features​​​​.
The service ensures that every login, signup, and token verification request is handled efficiently, using POST requests to secure user credentials and issue authentication tokens. These tokens are vital for user session persistence, supporting user stories about not needing to re-enter credentials upon each site visit. Additionally, the service plays a crucial role in the platform's network architecture by being accessible over a specified network port, allowing secure communications across the platform's internal network​​​​.
