### **Service:** image-server

### Service Purpose
The image-server service within the NFFH-ImageServer container is designed to manage and facilitate all operations related to image handling on the Not Far(m) From Home platform. This platform enables direct interaction between local farmers and consumers, focusing on the direct sale and pickup of local produce​​. The primary purpose of the image-server is to provide a robust and efficient mechanism for uploading and retrieving images, which are crucial for showcasing products and verifying identities within the marketplace. It supports essential functionalities such as image uploads for various roles (clients, farmers, administrators) and retrieval of these images, ensuring that the visual content is easily accessible and manageable. This service plays a vital role in enhancing user experience by enabling visual representation of products and users, which helps in building trust and authenticity in the online marketplace environment.

### Key Features
Key features of the image-server service include its ability to handle image uploads and retrievals efficiently using a web-based interface. The service provides an endpoint /images/<role>/upload for uploading images where users can send images as base64 encoded JSON objects. This feature is essential for users who need to upload pictures of their products or profile images. Upon successful upload, the service responds with a URL JSON object, providing a link to the uploaded image​​. Another significant feature is the retrieval functionality, accessible through the endpoint /images/<role>/<image_filename>. This feature allows users to access images directly via a simple GET request, facilitating easy integration with the front-end user interfaces where images are displayed. These features support the platform's goal of enabling farmers to showcase their products visually and consumers to view these products, enhancing the overall user experience on the platform.


#### Programming Language, Frameworks and Libraries

- Node.js: Used for building scalable network applications.
- Express: A minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.
- CORS: A package for providing a Connect/Express middleware that can be used to enable CORS (Cross-Origin Resource Sharing).
- http-proxy-middleware: An HTTP proxy middleware for Node.js, which can be used to proxy requests to an underlying server, likely used for routing requests to other services in the system.

#### Analysis of the Scaffolding and Architectural Patterns

- The gateway service is architected as a central API hub within a microservices-oriented environment, using Express to handle routing and middleware functionalities.
- The service is containerized using Docker, indicating a focus on scalability and deployment ease in cloud environments.
- By being connected to multiple other services via Docker networks, it plays a critical role in the system's service-oriented architecture, managing traffic between the client and various back-end services.


### Endpoints:

| Endpoint URL | Request Object | Response Object | HTTP Method |
|--------------|----------------|-----------------|-------------|
| /images/<role>/upload | JSON object with image data | URL JSON object | POST |
| /images/<role>/<image_filename> | None (uses path parameters) | Image file | GET |

### Data Structures:

#### JSON object with image data (for upload):
| Variable Name | Variable Type |
|---------------|---------------|
| base64_image  | string (base64) |

#### URL JSON object (response for upload):
| Variable Name | Variable Type |
|---------------|---------------|
| url           | string        |
